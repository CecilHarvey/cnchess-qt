/***************************************************************************
Purpose : 局势评估器－评估在某一特定棋局局面的情况下己方的形势，“赢－和－输”。
Comment : 如果蓝方要被将死了，那么评价函数返回一个充分大的正数；如果红方要被将死了，那么返回一个充分大的负数；如果棋局	是和棋(例如某一方逼和，或者双方都只有王)，那么返回一个常数，通常是零或接近零。如果不是棋局结束局面，那么它返回一个启发值。我将不详细介绍这个启发值是如何确定的，但是我有把握说子力平衡是首先要考虑的(如果红方盘面上多子的话，这个值就大)，而其他位置上的考虑(兵型、王的安全性、重要的子力等等)也需要加上。如果红方是赢棋或者很有希望赢，那么启发函数通常会返回正数；如果蓝方是赢棋或者很有希望赢，那么返回负数；如果棋局是均势或者是和棋，那么返回在零左右的数值。
Copyright ：(C) 2005 by frog         
 *   gorfllew@163.com                                                      *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/


#include "board.h"



/***** Bonous-红利 *****/
short CBoard::Bonous()
{
	short i, s, bn[2][7] = {{-2, -3, -3, -4, -4, -5, 0},
							{-2, -3, -3, -4, -4, -5, 0}};

	for (i = 0; i < 2; i++) {			// Scan BLUE and RED
		if (m_materialnumber[i][BISHOP] < 2) {
			bn[1-i][ROOK] += 4;
			bn[1-i][KNIGHT] += 2;
			bn[1-i][PAWN] += 1;
		}

		if (m_materialnumber[i][ELEPHAN] < 2) {
			bn[1-i][ROOK] += 2;
			bn[1-i][CANNON] += 2;
			bn[1-i][PAWN] += 1;
		}
	}

	if (m_color[0]==BLUE && m_color[1]==BLUE && m_piece[0]==ROOK && m_piece[1]==KNIGHT)
		bn[BLUE][6] -= 10;
	if (m_color[7]==BLUE && m_color[8]==BLUE && m_piece[8]==ROOK && m_piece[7]==KNIGHT)
		bn[BLUE][6] -= 10;
	if (m_color[81]==RED && m_color[82]==RED && m_piece[81]==ROOK && m_piece[82]==KNIGHT)
		bn[RED][6] -= 10;
	if (m_color[88]==RED && m_color[89]==RED && m_piece[89]==ROOK && m_piece[88]==KNIGHT)
		bn[RED][6] -= 10;

	s = bn[m_side][6] - bn[m_xside][6];

	for (i=0; i < 6; i++)
		s += m_materialnumber[m_side][i] * bn[m_side][i]
			 - m_materialnumber[m_xside][i] * bn[m_xside][i];
	return s;
}

// 各棋子处于棋盘上不同位置时对当前棋局局面评估产生的影响值
static char pointtable[7][2][90] =
	 {{{0,  0,  0,  0,  0,  0,  0,  0,  0, 			/* BLUE PAWN*/
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		10,  0, 12,  0, 15,  0, 12,  0, 10,
		10,  0, 13,  0, 10,  0, 13,  0, 10,
		20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 21, 21, 22, 22, 22, 21, 21, 20,
		20, 21, 21, 23, 23, 23, 21, 21, 20,
		20, 21, 21, 23, 22, 23, 21, 21, 20,
		11, 12, 13, 14, 14, 14, 13, 12, 11},

	  {11, 12, 13, 14, 14, 14, 13, 12, 11,          /*  RED PAWN*/
		20, 21, 21, 23, 22, 23, 21, 21, 20,
		20, 21, 21, 23, 23, 23, 21, 21, 20,
		20, 21, 21, 22, 22, 22, 21, 21, 20,
		20, 20, 20, 20, 20, 20, 20, 20, 20,
		10,  0, 13,  0, 10,  0, 13,  0, 10,
		10,  0, 12,  0, 15,  0, 12,  0, 10,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0}},

	  {{0,  0,  0, 20,  0, 20,  0,  0,  0, 			/*BLUE BISHOP */
		0,  0,  0,  0, 22,  0,  0,  0,  0,
		0,  0,  0, 19,  0, 19,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0},

	   {0,  0,  0,  0,  0,  0,  0,  0,  0,          /*RED BISHOP */
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0, 19,  0, 19,  0,  0,  0,
		0,  0,  0,  0, 22,  0,  0,  0,  0,
		0,  0,  0, 20,  0, 20,  0,  0,  0}},

	  {{0,  0, 25,  0,  0,  0, 25,  0,  0, 			/* BLUE ELEPHAN */
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		23,  0,  0,  0, 28,  0,  0,  0, 23,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0, 22,  0,  0,  0, 22,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0},

	   {0,  0,  0,  0,  0,  0,  0,  0,  0,          /* RED ELEPHAN */
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0, 22,  0,  0,  0, 22,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
	   	23,  0,  0,  0, 28,  0,  0,  0, 23,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0, 25,  0,  0,  0, 25,  0,  0}},

	  {{40, 35, 40, 40, 40, 40, 40, 35, 40, 		/* BLUE KNIGHT */
		40, 41, 42, 40, 20, 40, 42, 41, 40,
		40, 42, 43, 40, 40, 40, 43, 42, 40,
		40, 42, 43, 43, 43, 43, 43, 42, 40,
		40, 43, 44, 44, 44, 44, 44, 43, 40,
		40, 43, 44, 44, 44, 44, 44, 43, 40,
		40, 43, 44, 44, 44, 44, 44, 43, 40,
		40, 43, 44, 44, 44, 44, 44, 43, 40,
		40, 41, 42, 42, 42, 42, 42, 41, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40},

	   {40, 40, 40, 40, 40, 40, 40, 40, 40, 		/* RED KNIGHT */
		40, 41, 42, 42, 42, 42, 42, 41, 40,
		40, 43, 44, 44, 44, 44, 44, 43, 40,
		40, 43, 44, 44, 44, 44, 44, 43, 40,
		40, 43, 44, 44, 44, 44, 44, 43, 40,
		40, 43, 44, 44, 44, 44, 44, 43, 40,
		40, 42, 43, 43, 43, 43, 43, 42, 40,
		40, 42, 43, 40, 40, 40, 43, 42, 40,
		40, 41, 42, 40, 20, 40, 42, 41, 40,
		40, 35, 40, 40, 40, 40, 40, 35, 40}},

	  {{50, 50, 50, 50, 50, 50, 50, 50, 50, 		/* BLUE CANNON */
		50, 50, 50, 50, 50, 50, 50, 50, 50,
		50, 51, 53, 53, 55, 53, 53, 51, 50,
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 51, 51, 51, 51, 51, 51, 51, 50,
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 50, 50, 50, 50, 50, 50, 50, 50},

	   {50, 50, 50, 50, 50, 50, 50, 50, 50, 		/* RED CANNON */
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 51, 51, 51, 51, 51, 51, 51, 50,
		50, 51, 50, 50, 50, 50, 50, 51, 50,
		50, 51, 53, 53, 55, 53, 53, 51, 50,
		50, 50, 50, 50, 50, 50, 50, 50, 50,
		50, 50, 50, 50, 50, 50, 50, 50, 50}},


	  {{89, 92, 90, 90, 90, 90, 90, 92, 89, 		/* BLUE ROOK */
		91, 92, 90, 93, 90, 93, 90, 92, 91,
		90, 92, 90, 91, 90, 91, 90, 92, 90,
		90, 91, 90, 91, 90, 91, 90, 91, 90,
		90, 94, 90, 94, 90, 94, 90, 94, 90,
		90, 93, 90, 91, 90, 91, 90, 93, 90,
		90, 91, 90, 91, 90, 91, 90, 91, 90,
		90, 91, 90, 90, 90, 90, 90, 91, 90,
		90, 92, 91, 91, 90, 91, 91, 92, 90,
		90, 90, 90, 90, 90, 90, 90, 90, 90},

	   {90, 90, 90, 90, 90, 90, 90, 90, 90, 		/* RED ROOK */
		90, 92, 91, 91, 90, 91, 91, 92, 90,
		90, 91, 90, 90, 90, 90, 90, 91, 90,
		90, 91, 90, 91, 90, 91, 90, 91, 90,
		90, 93, 90, 91, 90, 91, 90, 93, 90,
		90, 94, 90, 94, 90, 94, 90, 94, 90,
		90, 91, 90, 91, 90, 91, 90, 91, 90,
		90, 92, 90, 91, 90, 91, 90, 92, 90,
		91, 92, 90, 93, 90, 93, 90, 92, 91,
		89, 92, 90, 90, 90, 90, 90, 92, 89}},

	  {{0,  0,  0, 30, 35, 30,  0,  0,  0, 			/* BLUE KING */
		0,  0,  0, 15, 15, 15,  0,  0,  0,
		0,  0,  0,  1,  1,  1,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0},

		{0,  0,  0,  0,  0,  0,  0,  0,  0,          /* RED KING */
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  1,  1,  1,  0,  0,  0,
		0,  0,  0, 15, 15, 15,  0,  0,  0,
		0,  0,  0, 30, 35, 30,  0,  0,  0}}};

/***** EVALUATE－评估 *****/
short CBoard::Eval()
{
	short i, s = 0;
	for(i=0; i<BOARD_SIZE; i++) {
		if (m_color[i]==BLUE)
			s += pointtable[m_piece[i]][BLUE][i];
		else 
			if (m_color[i]==RED)
				s -= pointtable[m_piece[i]][RED][i];
	}
	if (m_side==RED) s = -s;
	return s + Bonous();
}
